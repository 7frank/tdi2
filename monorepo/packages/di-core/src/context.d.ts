import { type ReactNode } from "react";
import { type DIContainer } from "./types";
interface DIProviderProps {
    container?: DIContainer;
    children: ReactNode;
}
export declare function DIProvider({ container, children }: DIProviderProps): import("react/jsx-runtime").JSX.Element;
export declare function useDI(): DIContainer;
/**
 * Hook to resolve a service from the DI container with automatic lifecycle management
 */
export declare function useService(token: string | symbol): {};
/**
 * Hook to optionally resolve a service from the DI container with automatic lifecycle management
 * Returns undefined if the service is not registered
 */
export declare function useOptionalService<T>(token: string | symbol): T | undefined;
/**
 * Hook to resolve multiple services at once
 * Useful for functional components with many dependencies
 */
export declare function useServices<T extends Record<string, any>>(serviceMap: {
    [K in keyof T]: string | symbol;
}): T;
/**
 * Hook for functional DI pattern
 * This would be generated by the transformer for functions with marker interfaces
 */
export declare function useFunctionalDI<T extends Record<string, any>>(dependencies: Array<{
    key: keyof T;
    token: string | symbol;
    optional?: boolean;
}>): T;
export {};
