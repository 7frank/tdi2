// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`Code Generator Snapshot Tests Simple Components should transform simple animal component: simple-animal-component 1`] = `
"import React from 'react';
import type { Inject } from "@tdi2/di-core/markers";
import { useService, useOptionalService } from "@tdi2/di-core/context";

export function AnimalComponent(props: {
  name: string;
  services: {
    animal: Inject<AnimalInterface>;
  };
}) {
                const animal = useService('AnimalInterface'); // Warning: implementation not found
                const services = { animal };
  const { name } = props;
  
  const handleClick = () => {
    console.log(services.animal.speak());
  };
  
  return (
    <div>
      <h1>{name}</h1>
      <p>Animal: {services.animal.getName()}</p>
      <button onClick={handleClick}>Make Sound</button>
    </div>
  );
}"
`;

exports[`Code Generator Snapshot Tests Simple Components should transform component with multiple animals: multi-animal-component 1`] = `
"import React from 'react';
import type { Inject, InjectOptional } from "@tdi2/di-core/markers";
import { useService, useOptionalService } from "@tdi2/di-core/context";

export function PetShopComponent(props: {
  shopName: string;
  services: {
    dog: Inject<AnimalInterface>;
    cat: Inject<AnimalInterface>;
    logger?: InjectOptional<LoggerInterface>;
  };
}) {
                const dog = useService('AnimalInterface'); // Warning: implementation not found
                const cat = useService('AnimalInterface'); // Warning: implementation not found
                const logger = undefined; // Optional dependency not found
                const services = { dog, cat, logger };
  const { shopName } = props;
  
  const showPets = () => {
    services.logger?.log('Showing pets');
    console.log('Dog says:', services.dog.speak());
    console.log('Cat says:', services.cat.speak());
  };
  
  return (
    <div>
      <h1>{shopName}</h1>
      <button onClick={showPets}>Show All Pets</button>
    </div>
  );
}"
`;

exports[`Code Generator Snapshot Tests Simple Components should transform arrow function component: arrow-animal-component 1`] = `
"import React from 'react';
import type { Inject } from "@tdi2/di-core/markers";
import { useService, useOptionalService } from "@tdi2/di-core/context";

export const QuickAnimalComponent = (props: {
  title: string;
  services: {
    animal: Inject<AnimalInterface>;
  };
}) => {
                const animal = useService('AnimalInterface'); // Warning: implementation not found
                const services = { animal };
  const { title } = props;
  return <div>{title}: {services.animal.getName()}</div>;
};"
`;

exports[`Code Generator Snapshot Tests Edge Cases should handle mixed DI and non-DI services: mixed-services-component 1`] = `
"import React from 'react';
import type { Inject } from "@tdi2/di-core/markers";
import { useService, useOptionalService } from "@tdi2/di-core/context";

export function MixedPetComponent(props: {
  title: string;
  services: {
    animal: Inject<AnimalInterface>;  // DI service
    utils: UtilityService;            // Non-DI service
    config: ConfigService;            // Non-DI service
  };
}) {
                const animal = useService('AnimalInterface'); // Warning: implementation not found
                const services = { animal };
  const { title } = props;
  return <div>{title}: {services.animal.getName()}</div>;
}"
`;

exports[`Code Generator Snapshot Tests Edge Cases should handle optional missing services: optional-missing-component 1`] = `
"import React from 'react';
import type { Inject, InjectOptional } from "@tdi2/di-core/markers";
import { useService, useOptionalService } from "@tdi2/di-core/context";

export function OptionalMissingComponent(props: {
  name: string;
  services: {
    animal: Inject<AnimalInterface>;
    logger?: InjectOptional<MissingLoggerInterface>;
    analytics?: InjectOptional<MissingAnalyticsInterface>;
  };
}) {
                const animal = useService('AnimalInterface'); // Warning: implementation not found
                const logger = undefined; // Optional dependency not found
                const analytics = undefined; // Optional dependency not found
                const services = { animal, logger, analytics };
  const { name } = props;
  
  React.useEffect(() => {
    services.logger?.log('Component mounted');
    services.analytics?.track('page_view');
  }, []);
  
  return <div>Hello {name}: {services.animal.getName()}</div>;
}"
`;

exports[`Code Generator Snapshot Tests Edge Cases should handle deep destructuring patterns: deep-destructuring-component 1`] = `
"import React from 'react';
import type { Inject } from "@tdi2/di-core/markers";
import { useService, useOptionalService } from "@tdi2/di-core/context";

export function DeepDestructuringComponent(props: {
  user: {
    profile: {
      settings: { theme: string; lang: string };
      preferences: { notifications: boolean };
    };
    metadata: { lastLogin: Date };
  };
  services: {
    animal: Inject<AnimalInterface>;
  };
}) {
                const animal = useService('AnimalInterface'); // Warning: implementation not found
                const services = { animal };
  const { user: { 
          profile: { 
            settings: { theme, lang },
            preferences: { notifications }
          },
          metadata: { lastLogin }
        } } = props;
  
  return (
    <div className={theme}>
      <p>Language: {lang}</p>
      <p>Notifications: {notifications ? 'On' : 'Off'}</p>
      <p>Last login: {lastLogin.toISOString()}</p>
      <p>Animal: {services.animal.getName()}</p>
    </div>
  );
}"
`;

exports[`Code Generator Snapshot Tests Separate Interfaces should handle components with separate interface definitions: separate-interface-component 1`] = `
"import React from 'react';
import type { PetComponentProps } from './PetComponentProps';
import { useService, useOptionalService } from "@tdi2/di-core/context";

export function SeparateInterfaceComponent(props: PetComponentProps) {
                const animal = useService('AnimalInterface'); // Warning: implementation not found
                const services = { animal };
  const { petName } = props;
  
  return (
    <div>
      <h2>{petName}</h2>
      <p>{services.animal.speak()}</p>
    </div>
  );
}"
`;

exports[`Code Generator Snapshot Tests Multiple Components should transform multiple components at once: multiple-components-transformation 1`] = `
[
  {
    "content": 
"
import React from 'react';
import type { Inject } from "@tdi2/di-core/markers";
import { useService, useOptionalService } from "@tdi2/di-core/context";

export function AnimalComponent(props: {
  name: string;
  services: {
    animal: Inject<AnimalInterface>;
  };
}) {
                const animal = useService('AnimalInterface'); // Warning: implementation not found
                const services = { animal };
  const { name } = props;
  
  const handleClick = () => {
    console.log(services.animal.speak());
  };
  
  return (
    <div>
      <h1>{name}</h1>
      <p>Animal: {services.animal.getName()}</p>
      <button onClick={handleClick}>Make Sound</button>
    </div>
  );
}
"
,
    "path": "/src/components/AnimalComponent.tsx",
  },
  {
    "content": 
"
import React from 'react';
import type { Inject, InjectOptional } from "@tdi2/di-core/markers";
import { useService, useOptionalService } from "@tdi2/di-core/context";

export function PetShopComponent(props: {
  shopName: string;
  services: {
    dog: Inject<AnimalInterface>;
    cat: Inject<AnimalInterface>;
    logger?: InjectOptional<LoggerInterface>;
  };
}) {
                const dog = useService('AnimalInterface'); // Warning: implementation not found
                const cat = useService('AnimalInterface'); // Warning: implementation not found
                const logger = undefined; // Optional dependency not found
                const services = { dog, cat, logger };
  const { shopName } = props;
  
  const showPets = () => {
    services.logger?.log('Showing pets');
    console.log('Dog says:', services.dog.speak());
    console.log('Cat says:', services.cat.speak());
  };
  
  return (
    <div>
      <h1>{shopName}</h1>
      <button onClick={showPets}>Show All Pets</button>
    </div>
  );
}
"
,
    "path": "/src/components/PetShopComponent.tsx",
  },
  {
    "content": 
"
import React from 'react';
import type { Inject } from "@tdi2/di-core/markers";
import { useService, useOptionalService } from "@tdi2/di-core/context";

export const QuickAnimalComponent = (props: {
  title: string;
  services: {
    animal: Inject<AnimalInterface>;
  };
}) => {
                const animal = useService('AnimalInterface'); // Warning: implementation not found
                const services = { animal };
  const { title } = props;
  return <div>{title}: {services.animal.getName()}</div>;
};
"
,
    "path": "/src/components/QuickAnimalComponent.tsx",
  },
]
`;

exports[`Code Generator Snapshot Tests Error Scenarios should handle all missing implementations gracefully: all-missing-implementations 1`] = `
"import React from 'react';
import type { Inject } from "@tdi2/di-core/markers";
import { useService, useOptionalService } from "@tdi2/di-core/context";

export function AnimalComponent(props: {
  name: string;
  services: {
    animal: Inject<AnimalInterface>;
  };
}) {
                const animal = useService('AnimalInterface'); // Warning: implementation not found
                const services = { animal };
  const { name } = props;
  
  const handleClick = () => {
    console.log(services.animal.speak());
  };
  
  return (
    <div>
      <h1>{name}</h1>
      <p>Animal: {services.animal.getName()}</p>
      <button onClick={handleClick}>Make Sound</button>
    </div>
  );
}"
`;

exports[`Code Generator Snapshot Tests Error Scenarios should handle partial missing implementations: partial-missing-implementations 1`] = `
"import React from 'react';
import type { Inject, InjectOptional } from "@tdi2/di-core/markers";
import { useService, useOptionalService } from "@tdi2/di-core/context";

export function PetShopComponent(props: {
  shopName: string;
  services: {
    dog: Inject<AnimalInterface>;
    cat: Inject<AnimalInterface>;
    logger?: InjectOptional<LoggerInterface>;
  };
}) {
                const dog = useService('AnimalInterface'); // Warning: implementation not found
                const cat = useService('AnimalInterface'); // Warning: implementation not found
                const logger = undefined; // Optional dependency not found
                const services = { dog, cat, logger };
  const { shopName } = props;
  
  const showPets = () => {
    services.logger?.log('Showing pets');
    console.log('Dog says:', services.dog.speak());
    console.log('Cat says:', services.cat.speak());
  };
  
  return (
    <div>
      <h1>{shopName}</h1>
      <button onClick={showPets}>Show All Pets</button>
    </div>
  );
}"
`;

exports[`Code Generator Snapshot Tests Transformation Summary should provide accurate transformation summary: transformation-summary 1`] = `
{
  "count": 2,
  "functions": [
    "AnimalComponent",
    "PetShopComponent",
  ],
  "resolvedDependencies": 2,
  "transformedFiles": [
    "/src/components/AnimalComponent.tsx",
    "/src/components/PetShopComponent.tsx",
  ],
}
`;
